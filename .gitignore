
import os
import tkinter as tk
from tkinter import ttk
from math import exp


def consumo_agua(dmax, abatimento):
    CA = 0
    
    if dmax == 9.5:
        if 40 <= abatimento <= 60:
            CA = 220
        elif 60 < abatimento <= 80:
            CA = 225
        elif 80 < abatimento <= 100:
            CA = 230
        else: 
            raise ValueError("Erro abatimento!!")
    
    elif dmax == 19:
        if 40 <= abatimento <= 60:
            CA = 195
        elif 60 < abatimento <= 80:
            CA = 200
        elif 80 < abatimento <= 100:
            CA = 205
        else:
            print("Erro abatimento!!")
            
    elif dmax == 25:
        if 40 <= abatimento <= 60:
            CA = 190
        elif 60 < abatimento <= 80:
            CA = 195
        elif 80 < abatimento <= 100:
            CA = 200
        else:
            print("Erro abatimento!!")
            
    elif dmax == 32:
        if 40 <= abatimento <= 60:
            CA = 185
        elif 60 < abatimento <= 80:
            CA = 190
        elif 80 < abatimento <= 100:
            CA = 195
        else:
            print("Erro abatimento!!")
            
    elif dmax == 38:
        if 40 <= abatimento <= 60:
            CA = 180
        elif 60 < abatimento <= 80:
            CA = 185
        elif 80 < abatimento <= 100:
            CA = 190
        else:
            print("Erro abatimento!!")
            
    else:
        print("Erro valor do diametro maximo, Não encontrado na tabela!!")
        
    return CA


def resistencia():
    fck = float(fck_var.get())
    d = str(combo.get())
    
    if d == "A":
        desvio = 4
    elif d == "B":
        desvio = 5.5
    elif d == "C":
        desvio = 7
    
    return fck + (1.65 * desvio)

def consumo_cimento(cons_a, ac):
    return cons_a / ac

def consumo_graudo(dmax):
    cg = 0
    massa_b = float(massa_brita_var.get())
    mf = float(mf_var.get())
    if dmax == 9.5:
        cg = (1.49 - (0.18 * mf)) / 1.8
    elif dmax == 19:
        cg = (1.71-(0.18*mf))/1.8
    elif dmax == 25:
        cg = (1.76-(0.18*mf))/1.8
    elif dmax == 32:
        cg = (1.8-(0.18*mf))/1.8
    elif dmax == 38:
        cg = (1.85-(0.18*mf))/1.8
    else:
        raise ValueError("Erro no Diametro maximo")
    return massa_b * cg

def consumo_miudo(cons_c, cons_g, cons_a):
    peso_c = float(peso_c_var.get())
    peso_ag = float(peso_ag_var.get())
    peso_am = float(peso_am_var.get())
    
    Vm = 1 - ((cons_c / peso_c) + (cons_g / peso_ag) + (cons_a / 1000))
    
    if Vm != 0:
        Cm = Vm * peso_am
        return Cm
    else:
        return 0

def traco():
    try:
        dmax = float(diam.get())
        abatimento = float(abatimento_var.get())
        cons_a = consumo_agua(dmax, abatimento)
        cons_c = consumo_cimento(cons_a, agua())
        cons_g = consumo_graudo(dmax)
        cons_m = consumo_miudo(cons_c, cons_g, cons_a)
        tc = cons_c / cons_c
        tm = cons_m / cons_c
        tg = cons_g / cons_c
        ta = cons_a / cons_c
        resultado_label.config(text=f"TRAÇO:\nCIMENTO: {round(tc,4)}\nAREIA {round(tm,2)}\nBRITA {round(tg,2)}\nÁGUA {round(ta,3)}")
        #resultado_label.config(text=f"{desvio}")
    except ValueError as e:
        resultado_label.config(text=f"Erro: {str(e)}")

def agua():
    z = str(cim.get())
    w = resistencia()
    if z == "26 Mpa":
        acc = exp(-(((1000*w)-4873)/31450))
    elif z == "29 Mpa":
        acc = exp(-((w-4.3803)/36.45))
    elif z == "32 Mpa":
        acc = exp(-((w-5.4667)/38.26))
    elif z == "35 Mpa":
        acc = exp(-((w-4.5978)/41.5))
    elif z == "38 Mpa":
        acc = exp(-((w-5.5097)/46.95))
    elif z == "41 Mpa":
        acc = exp(-((w-4.5274)/51.2))
    elif z == "44 Mpa":
        acc = exp(-(((500*w)-15309)/9120))

    return acc



# Crie uma janela principal
root = tk.Tk()
root.title("Calculadora de Traço de Concreto")










# Adicione widgets à interface


fck_label = ttk.Label(root, text="Resistência Fck (MPa):")
fck_label.grid(column=0, row=0, padx=10, pady=10)

fck_var = tk.StringVar()
fck_entry = ttk.Entry(root, textvariable=fck_var)
fck_entry.grid(column=1, row=0, padx=10, pady=10)

desvio_label = ttk.Label(root, text="Condição de preparo:")
desvio_label.grid(column=0, row=1, padx=10, pady=10)



listadesvio = ["A","B","C"]
combo = ttk.Combobox(root, values=listadesvio)
combo.set("Escolha uma opção")
combo.grid(column=1, row=1)



    
    
    
diametro_maximo_label = ttk.Label(root, text="Diametro maximo do graudo:")
diametro_maximo_label.grid(column=0, row=2, padx=10, pady=10)


listdiam = ["25","19","9.5","4.8","2.4"]
diam = ttk.Combobox(root, values=listdiam)
diam.set("Escolha uma opção")
diam.grid(column=1, row=2)
dmax = diam.get()





peso_c_label = ttk.Label(root, text="Massa especifica do cimento:")
peso_c_label.grid(column=0, row=3, padx=10, pady=10)

peso_c_var = tk.StringVar()
peso_c_entry = ttk.Entry(root, textvariable=peso_c_var)
peso_c_entry.grid(column=1, row=3, padx=10, pady=10)



massa_brita_label = ttk.Label(root, text="Massa especifica da brita solta:")
massa_brita_label.grid(column=0, row=4, padx=10, pady=10)

massa_brita_var = tk.StringVar()
massa_brita_entry = ttk.Entry(root, textvariable=massa_brita_var)
massa_brita_entry.grid(column=1, row=4, padx=10, pady=10)


peso_ag_label = ttk.Label(root, text="Massa especifica da brita:")
peso_ag_label.grid(column=0, row=5, padx=10, pady=10)

peso_ag_var = tk.StringVar()
peso_ag_entry = ttk.Entry(root, textvariable=peso_ag_var)
peso_ag_entry.grid(column=1, row=5, padx=10, pady=10)

peso_am_label = ttk.Label(root, text="Massa especifica da miudo:")
peso_am_label.grid(column=0, row=6, padx=10, pady=10)

peso_am_var = tk.StringVar()
peso_am_entry = ttk.Entry(root, textvariable=peso_am_var)
peso_am_entry.grid(column=1, row=6, padx=10, pady=10)



abatimento_label = ttk.Label(root, text="Abatimento:")
abatimento_label.grid(column=0, row=7, padx=10, pady=10)

abatimento_var = tk.StringVar()
abatimento_entry = ttk.Entry(root, textvariable=abatimento_var)
abatimento_entry.grid(column=1, row=7, padx=10, pady=10)





ac_label = ttk.Label(root, text="Tipo cimento:")
ac_label.grid(column=0, row=8, padx=10, pady=10)

listacim = ["26 Mpa","29 Mpa","32 Mpa","35 Mpa","38 Mpa","41 Mpa","44 Mpa"]
cim = ttk.Combobox(root, values=listacim)
cim.set("Escolha uma opção")
cim.grid(column=1, row=8)








mf_label = ttk.Label(root, text="Modulo de finura:")
mf_label.grid(column=0, row=9, padx=10, pady=10)

mf_var = tk.StringVar()
mf_entry = ttk.Entry(root, textvariable=mf_var)
mf_entry.grid(column=1, row=9, padx=10, pady=10)

calcular_button = ttk.Button(root, text="Calcular Traco", command=traco)
calcular_button.grid(column=0, row=10, columnspan=2, pady=20)

resultado_label = ttk.Label(root, text="TRACO")
resultado_label.grid(column=0, row=11, columnspan=2, pady=10)

# Inicie o loop principal da interface gráfica
root.mainloop()
